// Owners of this script in Alphabetical Order 
// Christian Di Maio & Giacomo Nunziati

statement: begin block_instruction end  

begin : BEGIN_CYCLE OPEN_BLOCK

end: CLOSE_BLOCK END_CYCLE OPEN_ROUND or_condition CLOSE_ROUND

block_instruction: instruction+

instruction: (assignment END_INSTRUCTION)

assignment: VAR ASSIGN arithmetic_expression

// Priority Arithmetic Expression, Avoiding Left Recursion
arithmetic_expression: term arithmetic_expression_
arithmetic_expression_: PLUS term arithmetic_expression_ | MINUS term arithmetic_expression | 

term: factor term_
term_: MULT factor term_ | DIV factor term_ | 


factor: NUMBER
    | MINUS factor
    | VAR
    | OPEN_ROUND arithmetic_expression CLOSE_ROUND


or_condition: or_condition LOGIC_OR and_condition | and_condition
and_condition: and_condition LOGIC_AND condition | condition

condition: VAR op NUMBER 
                    | BOOL_TRUE
                    | BOOL_FALSE
                    | NUMBER_TRUE
                    | NUMBER_FALSE
		            | LOGIC_NOT* OPEN_ROUND or_condition CLOSE_ROUND
                    | VAR


op: LT | GT | LEQ | GEQ | NE | EQ 


VAR: /[a-zA-Z_]\w{0,30}/
BEGIN_CYCLE: "do"
END_CYCLE: "while"
OPEN_BLOCK: "{"
CLOSE_BLOCK: "}"
OPEN_ROUND: "("
CLOSE_ROUND: ")"
END_INSTRUCTION: ";"
ASSIGN: "="
PLUS: "+"
MULT: "*" 
MINUS: "-"
DIV: "/"
LT:"<"
GT:">"
GEQ:">="
LEQ:"<="
EQ: "=="
NE:"!="
LOGIC_AND: "&&"
LOGIC_OR: "||"
LOGIC_NOT: "!"
true: "true" | "1"
BOOL_TRUE: "true"

// TO DO 1
NUMBER_TRUE: /[1-9]\d*/
BOOL_FALSE: "false"
NUMBER_FALSE: "0"

%import common.SIGNED_NUMBER -> NUMBER
%ignore /[ \t\n\f\r]+/

